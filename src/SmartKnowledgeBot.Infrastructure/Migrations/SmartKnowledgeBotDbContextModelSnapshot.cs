// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartKnowledgeBot.Infrastructure.Data;

#nullable disable

namespace SmartKnowledgeBot.Infrastructure.Migrations
{
    [DbContext(typeof(SmartKnowledgeBotDbContext))]
    partial class SmartKnowledgeBotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("BlobUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContentSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ExtractedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SearchVector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedBy");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.DocumentEmbedding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmbeddingModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmbeddingVector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndPosition")
                        .HasColumnType("int");

                    b.Property<int>("StartPosition")
                        .HasColumnType("int");

                    b.Property<string>("TextChunk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentEmbeddings");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.KnowledgeQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("ConfidenceScore")
                        .HasColumnType("float");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFromStructuredData")
                        .HasColumnType("bit");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ResponseTimeMs")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Query")
                        .HasDatabaseName("IX_KnowledgeQueries_Query_FullText");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserRole");

                    b.HasIndex("UserId", "Timestamp");

                    b.ToTable("KnowledgeQueries");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.KnowledgeResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ConfidenceScore")
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFromStructuredData")
                        .HasColumnType("bit");

                    b.Property<string>("ModelUsed")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("QueryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResponseTime")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TokensUsed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedAt");

                    b.HasIndex("QueryId")
                        .IsUnique();

                    b.ToTable("KnowledgeResponses");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.QueryAnalytics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AverageConfidenceScore")
                        .HasColumnType("decimal(5,4)");

                    b.Property<decimal>("AverageResponseTime")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SuccessfulQueries")
                        .HasColumnType("int");

                    b.Property<string>("TopQueries")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalQueries")
                        .HasColumnType("int");

                    b.Property<int>("UniqueUsers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("Date", "Category");

                    b.HasIndex("Date", "Department");

                    b.ToTable("QueryAnalytics");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.QueryDocumentReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QueryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RelevanceScore")
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("WasUsedInResponse")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("QueryId", "DocumentId")
                        .IsUnique();

                    b.ToTable("QueryDocumentReferences");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.QueryFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedbackType")
                        .HasColumnType("int");

                    b.Property<Guid>("QueryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FeedbackType");

                    b.HasIndex("UserId");

                    b.HasIndex("QueryId", "UserId")
                        .IsUnique();

                    b.ToTable("QueryFeedbacks");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId", "ExpiresAt");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.ResponseDocumentReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CitedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RelevanceScore")
                        .HasColumnType("decimal(5,4)");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ResponseId", "DocumentId")
                        .IsUnique();

                    b.ToTable("ResponseDocumentReferences");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.StructuredKnowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Source")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("StructuredKnowledge");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f83173a4-da30-4745-9b94-525da0a72add"),
                            AccessLevel = 0,
                            Answer = "To reset your password, go to the login page and click 'Forgot Password'. Enter your email address and follow the instructions sent to your email.",
                            Category = "IT Support",
                            CreatedAt = new DateTime(2025, 7, 7, 3, 41, 40, 214, DateTimeKind.Utc).AddTicks(9098),
                            CreatedBy = "275b575e-1073-4240-b0e7-6ceb2ba0ca9d",
                            IsActive = true,
                            Keywords = "password, reset, forgot, login, email",
                            Priority = 10,
                            Question = "How do I reset my password?",
                            Source = "IT Policy Manual v2.1"
                        },
                        new
                        {
                            Id = new Guid("e7cc47dd-94ca-4eb3-8055-a4136f53ce32"),
                            AccessLevel = 0,
                            Answer = "Employees accrue vacation time based on length of service. New employees start with 2 weeks annually, increasing to 3 weeks after 3 years and 4 weeks after 7 years.",
                            Category = "HR",
                            CreatedAt = new DateTime(2025, 7, 7, 3, 41, 40, 214, DateTimeKind.Utc).AddTicks(9127),
                            CreatedBy = "275b575e-1073-4240-b0e7-6ceb2ba0ca9d",
                            IsActive = true,
                            Keywords = "vacation, PTO, time off, leave, policy",
                            Priority = 8,
                            Question = "What are the company's vacation policies?",
                            Source = "Employee Handbook 2024"
                        },
                        new
                        {
                            Id = new Guid("770b483e-1414-4769-b7f5-747da75849d2"),
                            AccessLevel = 0,
                            Answer = "Expense reports should be submitted through the company portal within 30 days of the expense. Include all receipts and detailed descriptions of business purposes.",
                            Category = "Finance",
                            CreatedAt = new DateTime(2025, 7, 7, 3, 41, 40, 214, DateTimeKind.Utc).AddTicks(9133),
                            CreatedBy = "275b575e-1073-4240-b0e7-6ceb2ba0ca9d",
                            IsActive = true,
                            Keywords = "expense, report, receipt, reimbursement, finance",
                            Priority = 7,
                            Question = "How do I submit an expense report?",
                            Source = "Finance Procedures Guide"
                        });
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.SystemSetting", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("Category");

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            Key = "MaxDocumentSizeMB",
                            Category = "Document",
                            Description = "Maximum document upload size in MB",
                            IsEncrypted = false,
                            LastModified = new DateTime(2025, 7, 7, 3, 41, 40, 214, DateTimeKind.Utc).AddTicks(8941),
                            ModifiedBy = "275b575e-1073-4240-b0e7-6ceb2ba0ca9d",
                            Value = "50"
                        },
                        new
                        {
                            Key = "DefaultTokenExpirationMinutes",
                            Category = "Authentication",
                            Description = "Default JWT token expiration time in minutes",
                            IsEncrypted = false,
                            LastModified = new DateTime(2025, 7, 7, 3, 41, 40, 214, DateTimeKind.Utc).AddTicks(8947),
                            ModifiedBy = "275b575e-1073-4240-b0e7-6ceb2ba0ca9d",
                            Value = "60"
                        },
                        new
                        {
                            Key = "RefreshTokenExpirationDays",
                            Category = "Authentication",
                            Description = "Refresh token expiration time in days",
                            IsEncrypted = false,
                            LastModified = new DateTime(2025, 7, 7, 3, 41, 40, 214, DateTimeKind.Utc).AddTicks(8951),
                            ModifiedBy = "275b575e-1073-4240-b0e7-6ceb2ba0ca9d",
                            Value = "30"
                        },
                        new
                        {
                            Key = "MaxQueryLength",
                            Category = "Query",
                            Description = "Maximum length for knowledge queries",
                            IsEncrypted = false,
                            LastModified = new DateTime(2025, 7, 7, 3, 41, 40, 214, DateTimeKind.Utc).AddTicks(8953),
                            ModifiedBy = "275b575e-1073-4240-b0e7-6ceb2ba0ca9d",
                            Value = "2000"
                        },
                        new
                        {
                            Key = "EnableAnalytics",
                            Category = "Analytics",
                            Description = "Enable query analytics collection",
                            IsEncrypted = false,
                            LastModified = new DateTime(2025, 7, 7, 3, 41, 40, 214, DateTimeKind.Utc).AddTicks(8955),
                            ModifiedBy = "275b575e-1073-4240-b0e7-6ceb2ba0ca9d",
                            Value = "true"
                        });
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Role", "Department");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "275b575e-1073-4240-b0e7-6ceb2ba0ca9d",
                            CreatedAt = new DateTime(2025, 7, 7, 3, 41, 40, 214, DateTimeKind.Utc).AddTicks(8177),
                            Department = "IT",
                            Email = "admin@company.com",
                            FirstName = "System",
                            IsActive = true,
                            LastName = "Administrator",
                            PasswordHash = "$2a$11$dummy.hash.for.initial.setup",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.Document", b =>
                {
                    b.HasOne("SmartKnowledgeBot.Domain.Models.User", "UploadedByUser")
                        .WithMany("UploadedDocuments")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.DocumentEmbedding", b =>
                {
                    b.HasOne("SmartKnowledgeBot.Domain.Models.Document", "Document")
                        .WithMany("Embeddings")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.KnowledgeQuery", b =>
                {
                    b.HasOne("SmartKnowledgeBot.Domain.Models.User", "User")
                        .WithMany("Queries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.KnowledgeResponse", b =>
                {
                    b.HasOne("SmartKnowledgeBot.Domain.Models.KnowledgeQuery", "Query")
                        .WithOne("Response")
                        .HasForeignKey("SmartKnowledgeBot.Domain.Models.KnowledgeResponse", "QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.QueryDocumentReference", b =>
                {
                    b.HasOne("SmartKnowledgeBot.Domain.Models.Document", "Document")
                        .WithMany("QueryReferences")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartKnowledgeBot.Domain.Models.KnowledgeQuery", "Query")
                        .WithMany("DocumentReferences")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.QueryFeedback", b =>
                {
                    b.HasOne("SmartKnowledgeBot.Domain.Models.KnowledgeQuery", "Query")
                        .WithMany("Feedbacks")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartKnowledgeBot.Domain.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Query");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("SmartKnowledgeBot.Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.ResponseDocumentReference", b =>
                {
                    b.HasOne("SmartKnowledgeBot.Domain.Models.Document", "Document")
                        .WithMany("ResponseReferences")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartKnowledgeBot.Domain.Models.KnowledgeResponse", "Response")
                        .WithMany("RelevantDocuments")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.StructuredKnowledge", b =>
                {
                    b.HasOne("SmartKnowledgeBot.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.Document", b =>
                {
                    b.Navigation("Embeddings");

                    b.Navigation("QueryReferences");

                    b.Navigation("ResponseReferences");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.KnowledgeQuery", b =>
                {
                    b.Navigation("DocumentReferences");

                    b.Navigation("Feedbacks");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.KnowledgeResponse", b =>
                {
                    b.Navigation("RelevantDocuments");
                });

            modelBuilder.Entity("SmartKnowledgeBot.Domain.Models.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Queries");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UploadedDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
